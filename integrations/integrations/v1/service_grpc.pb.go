// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: integrations/integrations/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_GetIntegrations_FullMethodName               = "/integrations.integrations.v1.Service/GetIntegrations"
	Service_RegisterIntegration_FullMethodName           = "/integrations.integrations.v1.Service/RegisterIntegration"
	Service_RegisterIntegrationParameters_FullMethodName = "/integrations.integrations.v1.Service/RegisterIntegrationParameters"
	Service_GetIntegrationParameters_FullMethodName      = "/integrations.integrations.v1.Service/GetIntegrationParameters"
	Service_RemoveIntegrationParameters_FullMethodName   = "/integrations.integrations.v1.Service/RemoveIntegrationParameters"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	GetIntegrations(ctx context.Context, in *GetIntegrationsRequest, opts ...grpc.CallOption) (*GetIntegrationsResponse, error)
	RegisterIntegration(ctx context.Context, in *RegisterIntegrationRequest, opts ...grpc.CallOption) (*RegisterIntegrationResponse, error)
	RegisterIntegrationParameters(ctx context.Context, in *RegisterIntegrationParametersRequest, opts ...grpc.CallOption) (*RegisterIntegrationParametersResponse, error)
	GetIntegrationParameters(ctx context.Context, in *GetIntegrationParametersRequest, opts ...grpc.CallOption) (*GetIntegrationParametersResponse, error)
	RemoveIntegrationParameters(ctx context.Context, in *RemoveIntegrationParametersRequest, opts ...grpc.CallOption) (*RemoveIntegrationParametersResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetIntegrations(ctx context.Context, in *GetIntegrationsRequest, opts ...grpc.CallOption) (*GetIntegrationsResponse, error) {
	out := new(GetIntegrationsResponse)
	err := c.cc.Invoke(ctx, Service_GetIntegrations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RegisterIntegration(ctx context.Context, in *RegisterIntegrationRequest, opts ...grpc.CallOption) (*RegisterIntegrationResponse, error) {
	out := new(RegisterIntegrationResponse)
	err := c.cc.Invoke(ctx, Service_RegisterIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RegisterIntegrationParameters(ctx context.Context, in *RegisterIntegrationParametersRequest, opts ...grpc.CallOption) (*RegisterIntegrationParametersResponse, error) {
	out := new(RegisterIntegrationParametersResponse)
	err := c.cc.Invoke(ctx, Service_RegisterIntegrationParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetIntegrationParameters(ctx context.Context, in *GetIntegrationParametersRequest, opts ...grpc.CallOption) (*GetIntegrationParametersResponse, error) {
	out := new(GetIntegrationParametersResponse)
	err := c.cc.Invoke(ctx, Service_GetIntegrationParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RemoveIntegrationParameters(ctx context.Context, in *RemoveIntegrationParametersRequest, opts ...grpc.CallOption) (*RemoveIntegrationParametersResponse, error) {
	out := new(RemoveIntegrationParametersResponse)
	err := c.cc.Invoke(ctx, Service_RemoveIntegrationParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	GetIntegrations(context.Context, *GetIntegrationsRequest) (*GetIntegrationsResponse, error)
	RegisterIntegration(context.Context, *RegisterIntegrationRequest) (*RegisterIntegrationResponse, error)
	RegisterIntegrationParameters(context.Context, *RegisterIntegrationParametersRequest) (*RegisterIntegrationParametersResponse, error)
	GetIntegrationParameters(context.Context, *GetIntegrationParametersRequest) (*GetIntegrationParametersResponse, error)
	RemoveIntegrationParameters(context.Context, *RemoveIntegrationParametersRequest) (*RemoveIntegrationParametersResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) GetIntegrations(context.Context, *GetIntegrationsRequest) (*GetIntegrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrations not implemented")
}
func (UnimplementedServiceServer) RegisterIntegration(context.Context, *RegisterIntegrationRequest) (*RegisterIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterIntegration not implemented")
}
func (UnimplementedServiceServer) RegisterIntegrationParameters(context.Context, *RegisterIntegrationParametersRequest) (*RegisterIntegrationParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterIntegrationParameters not implemented")
}
func (UnimplementedServiceServer) GetIntegrationParameters(context.Context, *GetIntegrationParametersRequest) (*GetIntegrationParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationParameters not implemented")
}
func (UnimplementedServiceServer) RemoveIntegrationParameters(context.Context, *RemoveIntegrationParametersRequest) (*RemoveIntegrationParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIntegrationParameters not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_GetIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetIntegrations(ctx, req.(*GetIntegrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RegisterIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RegisterIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_RegisterIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RegisterIntegration(ctx, req.(*RegisterIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RegisterIntegrationParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterIntegrationParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RegisterIntegrationParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_RegisterIntegrationParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RegisterIntegrationParameters(ctx, req.(*RegisterIntegrationParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetIntegrationParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetIntegrationParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetIntegrationParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetIntegrationParameters(ctx, req.(*GetIntegrationParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RemoveIntegrationParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIntegrationParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RemoveIntegrationParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_RemoveIntegrationParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RemoveIntegrationParameters(ctx, req.(*RemoveIntegrationParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integrations.integrations.v1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIntegrations",
			Handler:    _Service_GetIntegrations_Handler,
		},
		{
			MethodName: "RegisterIntegration",
			Handler:    _Service_RegisterIntegration_Handler,
		},
		{
			MethodName: "RegisterIntegrationParameters",
			Handler:    _Service_RegisterIntegrationParameters_Handler,
		},
		{
			MethodName: "GetIntegrationParameters",
			Handler:    _Service_GetIntegrationParameters_Handler,
		},
		{
			MethodName: "RemoveIntegrationParameters",
			Handler:    _Service_RemoveIntegrationParameters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integrations/integrations/v1/service.proto",
}
