// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: integrations/integrations/v1/messages.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _messages_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetIntegrationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIntegrationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIntegrationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIntegrationsRequestMultiError, or nil if none found.
func (m *GetIntegrationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIntegrationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOwnerId()); l < 1 || l > 255 {
		err := GetIntegrationsRequestValidationError{
			field:  "OwnerId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetIntegrationsRequestMultiError(errors)
	}

	return nil
}

// GetIntegrationsRequestMultiError is an error wrapping multiple validation
// errors returned by GetIntegrationsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetIntegrationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIntegrationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIntegrationsRequestMultiError) AllErrors() []error { return m }

// GetIntegrationsRequestValidationError is the validation error returned by
// GetIntegrationsRequest.Validate if the designated constraints aren't met.
type GetIntegrationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntegrationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntegrationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntegrationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntegrationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntegrationsRequestValidationError) ErrorName() string {
	return "GetIntegrationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIntegrationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntegrationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntegrationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntegrationsRequestValidationError{}

// Validate checks the field values on GetIntegrationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIntegrationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIntegrationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIntegrationsResponseMultiError, or nil if none found.
func (m *GetIntegrationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIntegrationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetIntegrationsResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetIntegrationsResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIntegrationsResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetIntegrations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIntegrationsResponseValidationError{
						field:  fmt.Sprintf("Integrations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIntegrationsResponseValidationError{
						field:  fmt.Sprintf("Integrations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIntegrationsResponseValidationError{
					field:  fmt.Sprintf("Integrations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetIntegrationsResponseMultiError(errors)
	}

	return nil
}

// GetIntegrationsResponseMultiError is an error wrapping multiple validation
// errors returned by GetIntegrationsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetIntegrationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIntegrationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIntegrationsResponseMultiError) AllErrors() []error { return m }

// GetIntegrationsResponseValidationError is the validation error returned by
// GetIntegrationsResponse.Validate if the designated constraints aren't met.
type GetIntegrationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntegrationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntegrationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntegrationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntegrationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntegrationsResponseValidationError) ErrorName() string {
	return "GetIntegrationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIntegrationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntegrationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntegrationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntegrationsResponseValidationError{}

// Validate checks the field values on RegisterIntegrationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterIntegrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterIntegrationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterIntegrationRequestMultiError, or nil if none found.
func (m *RegisterIntegrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterIntegrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterIntegrationRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterIntegrationRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterIntegrationRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIntegration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterIntegrationRequestValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterIntegrationRequestValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntegration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterIntegrationRequestValidationError{
				field:  "Integration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterIntegrationRequestMultiError(errors)
	}

	return nil
}

// RegisterIntegrationRequestMultiError is an error wrapping multiple
// validation errors returned by RegisterIntegrationRequest.ValidateAll() if
// the designated constraints aren't met.
type RegisterIntegrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterIntegrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterIntegrationRequestMultiError) AllErrors() []error { return m }

// RegisterIntegrationRequestValidationError is the validation error returned
// by RegisterIntegrationRequest.Validate if the designated constraints aren't met.
type RegisterIntegrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterIntegrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterIntegrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterIntegrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterIntegrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterIntegrationRequestValidationError) ErrorName() string {
	return "RegisterIntegrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterIntegrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterIntegrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterIntegrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterIntegrationRequestValidationError{}

// Validate checks the field values on RegisterIntegrationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterIntegrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterIntegrationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterIntegrationResponseMultiError, or nil if none found.
func (m *RegisterIntegrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterIntegrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterIntegrationResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterIntegrationResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterIntegrationResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterIntegrationResponseMultiError(errors)
	}

	return nil
}

// RegisterIntegrationResponseMultiError is an error wrapping multiple
// validation errors returned by RegisterIntegrationResponse.ValidateAll() if
// the designated constraints aren't met.
type RegisterIntegrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterIntegrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterIntegrationResponseMultiError) AllErrors() []error { return m }

// RegisterIntegrationResponseValidationError is the validation error returned
// by RegisterIntegrationResponse.Validate if the designated constraints
// aren't met.
type RegisterIntegrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterIntegrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterIntegrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterIntegrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterIntegrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterIntegrationResponseValidationError) ErrorName() string {
	return "RegisterIntegrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterIntegrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterIntegrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterIntegrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterIntegrationResponseValidationError{}

// Validate checks the field values on RegisterIntegrationParametersRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RegisterIntegrationParametersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterIntegrationParametersRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RegisterIntegrationParametersRequestMultiError, or nil if none found.
func (m *RegisterIntegrationParametersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterIntegrationParametersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIntegration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterIntegrationParametersRequestValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterIntegrationParametersRequestValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntegration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterIntegrationParametersRequestValidationError{
				field:  "Integration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegisterIntegrationParametersRequestValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegisterIntegrationParametersRequestValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterIntegrationParametersRequestValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RegisterIntegrationParametersRequestMultiError(errors)
	}

	return nil
}

// RegisterIntegrationParametersRequestMultiError is an error wrapping multiple
// validation errors returned by
// RegisterIntegrationParametersRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterIntegrationParametersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterIntegrationParametersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterIntegrationParametersRequestMultiError) AllErrors() []error { return m }

// RegisterIntegrationParametersRequestValidationError is the validation error
// returned by RegisterIntegrationParametersRequest.Validate if the designated
// constraints aren't met.
type RegisterIntegrationParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterIntegrationParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterIntegrationParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterIntegrationParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterIntegrationParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterIntegrationParametersRequestValidationError) ErrorName() string {
	return "RegisterIntegrationParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterIntegrationParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterIntegrationParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterIntegrationParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterIntegrationParametersRequestValidationError{}

// Validate checks the field values on RegisterIntegrationParametersResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RegisterIntegrationParametersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterIntegrationParametersResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RegisterIntegrationParametersResponseMultiError, or nil if none found.
func (m *RegisterIntegrationParametersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterIntegrationParametersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterIntegrationParametersResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterIntegrationParametersResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterIntegrationParametersResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterIntegrationParametersResponseMultiError(errors)
	}

	return nil
}

// RegisterIntegrationParametersResponseMultiError is an error wrapping
// multiple validation errors returned by
// RegisterIntegrationParametersResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterIntegrationParametersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterIntegrationParametersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterIntegrationParametersResponseMultiError) AllErrors() []error { return m }

// RegisterIntegrationParametersResponseValidationError is the validation error
// returned by RegisterIntegrationParametersResponse.Validate if the
// designated constraints aren't met.
type RegisterIntegrationParametersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterIntegrationParametersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterIntegrationParametersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterIntegrationParametersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterIntegrationParametersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterIntegrationParametersResponseValidationError) ErrorName() string {
	return "RegisterIntegrationParametersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterIntegrationParametersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterIntegrationParametersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterIntegrationParametersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterIntegrationParametersResponseValidationError{}

// Validate checks the field values on GetIntegrationParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIntegrationParametersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIntegrationParametersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetIntegrationParametersRequestMultiError, or nil if none found.
func (m *GetIntegrationParametersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIntegrationParametersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetIntegrationId()); l < 1 || l > 255 {
		err := GetIntegrationParametersRequestValidationError{
			field:  "IntegrationId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetIntegrationParametersRequestMultiError(errors)
	}

	return nil
}

// GetIntegrationParametersRequestMultiError is an error wrapping multiple
// validation errors returned by GetIntegrationParametersRequest.ValidateAll()
// if the designated constraints aren't met.
type GetIntegrationParametersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIntegrationParametersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIntegrationParametersRequestMultiError) AllErrors() []error { return m }

// GetIntegrationParametersRequestValidationError is the validation error
// returned by GetIntegrationParametersRequest.Validate if the designated
// constraints aren't met.
type GetIntegrationParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntegrationParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntegrationParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntegrationParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntegrationParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntegrationParametersRequestValidationError) ErrorName() string {
	return "GetIntegrationParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIntegrationParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntegrationParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntegrationParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntegrationParametersRequestValidationError{}

// Validate checks the field values on GetIntegrationParametersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetIntegrationParametersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIntegrationParametersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetIntegrationParametersResponseMultiError, or nil if none found.
func (m *GetIntegrationParametersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIntegrationParametersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetIntegrationParametersResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetIntegrationParametersResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIntegrationParametersResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIntegrationParametersResponseValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIntegrationParametersResponseValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIntegrationParametersResponseValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetIntegrationParametersResponseMultiError(errors)
	}

	return nil
}

// GetIntegrationParametersResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetIntegrationParametersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetIntegrationParametersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIntegrationParametersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIntegrationParametersResponseMultiError) AllErrors() []error { return m }

// GetIntegrationParametersResponseValidationError is the validation error
// returned by GetIntegrationParametersResponse.Validate if the designated
// constraints aren't met.
type GetIntegrationParametersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntegrationParametersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntegrationParametersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntegrationParametersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntegrationParametersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntegrationParametersResponseValidationError) ErrorName() string {
	return "GetIntegrationParametersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIntegrationParametersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntegrationParametersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntegrationParametersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntegrationParametersResponseValidationError{}

// Validate checks the field values on RemoveIntegrationParametersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemoveIntegrationParametersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveIntegrationParametersRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveIntegrationParametersRequestMultiError, or nil if none found.
func (m *RemoveIntegrationParametersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveIntegrationParametersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetIntegrationId()); l < 1 || l > 255 {
		err := RemoveIntegrationParametersRequestValidationError{
			field:  "IntegrationId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetParameterIds()); l < 1 || l > 100 {
		err := RemoveIntegrationParametersRequestValidationError{
			field:  "ParameterIds",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_RemoveIntegrationParametersRequest_ParameterIds_Unique := make(map[string]struct{}, len(m.GetParameterIds()))

	for idx, item := range m.GetParameterIds() {
		_, _ = idx, item

		if _, exists := _RemoveIntegrationParametersRequest_ParameterIds_Unique[item]; exists {
			err := RemoveIntegrationParametersRequestValidationError{
				field:  fmt.Sprintf("ParameterIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_RemoveIntegrationParametersRequest_ParameterIds_Unique[item] = struct{}{}
		}

		if l := utf8.RuneCountInString(item); l < 1 || l > 255 {
			err := RemoveIntegrationParametersRequestValidationError{
				field:  fmt.Sprintf("ParameterIds[%v]", idx),
				reason: "value length must be between 1 and 255 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateUuid(item); err != nil {
			err = RemoveIntegrationParametersRequestValidationError{
				field:  fmt.Sprintf("ParameterIds[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RemoveIntegrationParametersRequestMultiError(errors)
	}

	return nil
}

func (m *RemoveIntegrationParametersRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RemoveIntegrationParametersRequestMultiError is an error wrapping multiple
// validation errors returned by
// RemoveIntegrationParametersRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveIntegrationParametersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveIntegrationParametersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveIntegrationParametersRequestMultiError) AllErrors() []error { return m }

// RemoveIntegrationParametersRequestValidationError is the validation error
// returned by RemoveIntegrationParametersRequest.Validate if the designated
// constraints aren't met.
type RemoveIntegrationParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveIntegrationParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveIntegrationParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveIntegrationParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveIntegrationParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveIntegrationParametersRequestValidationError) ErrorName() string {
	return "RemoveIntegrationParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveIntegrationParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveIntegrationParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveIntegrationParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveIntegrationParametersRequestValidationError{}

// Validate checks the field values on RemoveIntegrationParametersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemoveIntegrationParametersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveIntegrationParametersResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveIntegrationParametersResponseMultiError, or nil if none found.
func (m *RemoveIntegrationParametersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveIntegrationParametersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveIntegrationParametersResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveIntegrationParametersResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveIntegrationParametersResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveIntegrationParametersResponseMultiError(errors)
	}

	return nil
}

// RemoveIntegrationParametersResponseMultiError is an error wrapping multiple
// validation errors returned by
// RemoveIntegrationParametersResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveIntegrationParametersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveIntegrationParametersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveIntegrationParametersResponseMultiError) AllErrors() []error { return m }

// RemoveIntegrationParametersResponseValidationError is the validation error
// returned by RemoveIntegrationParametersResponse.Validate if the designated
// constraints aren't met.
type RemoveIntegrationParametersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveIntegrationParametersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveIntegrationParametersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveIntegrationParametersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveIntegrationParametersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveIntegrationParametersResponseValidationError) ErrorName() string {
	return "RemoveIntegrationParametersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveIntegrationParametersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveIntegrationParametersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveIntegrationParametersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveIntegrationParametersResponseValidationError{}
