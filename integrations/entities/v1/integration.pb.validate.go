// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: integrations/entities/v1/integration.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _integration_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Integration with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Integration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Integration with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IntegrationMultiError, or
// nil if none found.
func (m *Integration) ValidateAll() error {
	return m.validate(true)
}

func (m *Integration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != "" {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = IntegrationValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := IntegrationValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 255 {
		err := IntegrationValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IntegrationMultiError(errors)
	}

	return nil
}

func (m *Integration) _validateUuid(uuid string) error {
	if matched := _integration_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IntegrationMultiError is an error wrapping multiple validation errors
// returned by Integration.ValidateAll() if the designated constraints aren't met.
type IntegrationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationMultiError) AllErrors() []error { return m }

// IntegrationValidationError is the validation error returned by
// Integration.Validate if the designated constraints aren't met.
type IntegrationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationValidationError) ErrorName() string { return "IntegrationValidationError" }

// Error satisfies the builtin error interface
func (e IntegrationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationValidationError{}

// Validate checks the field values on IntegrationType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IntegrationType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntegrationTypeMultiError, or nil if none found.
func (m *IntegrationType) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != "" {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = IntegrationTypeValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := IntegrationTypeValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 255 {
		err := IntegrationTypeValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationTypeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationTypeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationTypeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IntegrationTypeMultiError(errors)
	}

	return nil
}

func (m *IntegrationType) _validateUuid(uuid string) error {
	if matched := _integration_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IntegrationTypeMultiError is an error wrapping multiple validation errors
// returned by IntegrationType.ValidateAll() if the designated constraints
// aren't met.
type IntegrationTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationTypeMultiError) AllErrors() []error { return m }

// IntegrationTypeValidationError is the validation error returned by
// IntegrationType.Validate if the designated constraints aren't met.
type IntegrationTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationTypeValidationError) ErrorName() string { return "IntegrationTypeValidationError" }

// Error satisfies the builtin error interface
func (e IntegrationTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationTypeValidationError{}

// Validate checks the field values on IntegrationProperty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntegrationProperty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationProperty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntegrationPropertyMultiError, or nil if none found.
func (m *IntegrationProperty) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationProperty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != "" {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = IntegrationPropertyValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 255 {
		err := IntegrationPropertyValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 255 {
		err := IntegrationPropertyValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IntegrationPropertyMultiError(errors)
	}

	return nil
}

func (m *IntegrationProperty) _validateUuid(uuid string) error {
	if matched := _integration_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IntegrationPropertyMultiError is an error wrapping multiple validation
// errors returned by IntegrationProperty.ValidateAll() if the designated
// constraints aren't met.
type IntegrationPropertyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationPropertyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationPropertyMultiError) AllErrors() []error { return m }

// IntegrationPropertyValidationError is the validation error returned by
// IntegrationProperty.Validate if the designated constraints aren't met.
type IntegrationPropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationPropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationPropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationPropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationPropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationPropertyValidationError) ErrorName() string {
	return "IntegrationPropertyValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationPropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationProperty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationPropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationPropertyValidationError{}
